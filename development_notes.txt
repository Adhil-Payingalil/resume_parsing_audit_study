CURRENT ISSUES AND STATUS UPDATES

1)    Word Document Support

        Word documents (.docx) are currently not supported.

        Two possible solutions:
        a) Extract text from .docx and inject it into the prompt (easy to do), but the current code depends on file upload, so we’ll need to refactor it to make file upload optional.
        b) Find a way to upload .docx files directly to Gemini (better long-term solution).

        Status: Solved temporarily by converting .docx files to PDF if the filename contains “docx.” However, we’re unsure if this may cause any issues later.
        This was solved using docx2pdf converter

2)    Prompt Engineering Templates

        The templates are not fully developed and need team input to make them robust.

        The benefit is that the prompt templates can be changed without modifying the core code.

        Hitting Gemini API limits is easy, so we’ll need to batch the data by sector and assign them among team members.

        We’ll all use the same MongoDB database to store results.

3)    Shared MongoDB Database

        We needed a way to share data across the team.

        Status: Solved using MongoDB Atlas (free tier, up to 512 MB). Everyone has access.

4)   JSONResume Pipeline Testing

        We need to show Jeremy that we can generate good-looking resumes from text.

        The goal is to:

            Fetch a document from MongoDB

            Use a JSONResume theme/tool to convert that JSON into a PDF

        Status: Initial version done on June 3. The resumed_exported module handles this.

5)    Theme Testing and Logging Issues (continuation of 4.)

        Two themes tested so far gave disappointing results. Need to test more or customize.

6)     Logging issues:

            When run in a loop, the logger only creates one log file.

            It always creates an error log file, even if there’s no error.

        Next step: Improve logger to create separate log files for each run and avoid empty error logs.

DEVELOPMENT MILESTONES

    May 26

        Refactored the codebase to use classes instead of functions. This improved readability and made each function simpler. Older function-based code is still in previous commits.

    May 29

        Created a module to pull data from MongoDB. Includes:

            A function to get all documents in a collection as a Python list.

            A loop to process each document from that list.

    June 3

        Created the resumed_exported module. This converts MongoDB documents into PDF resumes using JSONResume themes.

    June 11 
        
        Created a two pass model, meaning one file can be uploaded, and two models with different config, and different prompts can run through the same file
        - For example, one more powerful model can take EDA task, while other smaller model can take up the flagging for cleaning task
        - For this to happen I had to create a dynamic MONGO_SCHEMA stored in the folder by the same name. the mongodb module was updated for this.
        - All the modules were moved to PYTHON_MODULES folder
        - Added a feature that let's us use either the production database hosted remotely, or local one for testing.
        
